/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package byui.cit260.zombiesHunting.JFrame;

import byui.cit260.zombiesHunting.control.PlayerControl;
import byui.cit260.zombiesHunting.model.Game;
import byui.cit260.zombiesHunting.model.Location;
import byui.cit260.zombiesHunting.model.Map;
import byui.cit260.zombiesHunting.model.Player;
import byui.cit260.zombiesHunting.model.Scene;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import zombiehunting.ZombieHunting;

/**
 *
 * @author Computer
 */
public class MapFrame extends javax.swing.JFrame {

    private static Game game;
    private static Map[] rooms;

    public static Game getGame() {
        return game;
    }

    public static void setGame(Game game) {
        MapFrame.game = game;
    }

    public static Map[] getRooms() {
        return rooms;
    }

    public static void setRooms(Map[] rooms) {
        MapFrame.rooms = rooms;
    }
    
    
    /**
     * Creates new form MapFrame
     */
    public MapFrame() {
        initComponents();
        //can add your own code
        
        Game game = ZombieHunting.getCurrentGame();
        Map rooms[] = game.getGameMaps();
        Location locations[][] = rooms[0].getLocations();
        //populates the table
        int rowCount = this.jTable1.getRowCount();
        int columnCount = this.jTable1.getColumnCount();
        
        int totalRows = rooms[0].getTotalRows();
        int totalColumns = rooms[0].getTotalColumns();
        
        for (int row = 0; row < totalRows; row++ ){
            for (int column = 0; column < totalColumns; column++){
                //System.out.print("|"); //row divider
                Scene temp = locations[row][column].getScene();
                
                if (temp == null){
                   Scene square = new Scene();
                   locations[row][column].setScene(square);
                   this.jTable1.getModel().setValueAt(square.getDescription(), row, column);
                   //System.out.print(square.getDescription());
                }
                else{
                    this.jTable1.getModel().setValueAt(temp.getDescription(), row, column);
                    //System.out.print(temp.getDescription());
                }                             
            }
            //System.out.println("|");
        }
        /*
        for (int i = 0; i < rowCount; i++) {
           for (int j = 0; j < columnCount; j++){
              //use below statement this to change values on the table
              this.jTable1.getModel().setValueAt("??", i, j);
            }
        }
        */
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        this.jTable1.setDefaultRenderer(String.class, centerRenderer);
        
        TableColumnModel columnTableModel = this.jTable1.getColumnModel();
           for (int j = 0; j < columnCount; j++){
              columnTableModel.getColumn(j).setCellRenderer(centerRenderer);
           }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpUpButton = new javax.swing.JButton();
        jpRightButton = new javax.swing.JButton();
        jpLeftButton = new javax.swing.JButton();
        jpDownButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jpCheckWeaponsButton = new javax.swing.JButton();
        jpInventoryView = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jpUpButton.setText("Up");
        jpUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpUpButtonActionPerformed(evt);
            }
        });

        jpRightButton.setText("Right");
        jpRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpRightButtonActionPerformed(evt);
            }
        });

        jpLeftButton.setText("Left");
        jpLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpLeftButtonActionPerformed(evt);
            }
        });

        jpDownButton.setText("Down");
        jpDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpDownButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Movement");

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Options");

        jpCheckWeaponsButton.setText("check weapons");

        jpInventoryView.setText("View inventory");
        jpInventoryView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpInventoryViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jpLeftButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpRightButton)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpInventoryView)
                            .addComponent(jpCheckWeaponsButton))
                        .addGap(19, 19, 19))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jpUpButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jpDownButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpUpButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jpLeftButton)
                    .addComponent(jpRightButton))
                .addGap(18, 18, 18)
                .addComponent(jpDownButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jpCheckWeaponsButton)
                .addGap(18, 18, 18)
                .addComponent(jpInventoryView)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        //int row = this.jTable1.
    }//GEN-LAST:event_jTable1MouseClicked

    private void jpUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpUpButtonActionPerformed
        // TODO add your handling code here:
        Game game = ZombieHunting.getCurrentGame();
        Player player = game.getPlayer();
        
        //old positioning data
        int oldRow = player.getRowPosition();
        int oldColumn = player.getColumnPosition();
        
        //move the player
        PlayerControl.movePlayer("W");
        
        //new positioning data
        int newRow = player.getRowPosition();
        int newColumn = player.getColumnPosition();
        
        this.jTable1.getModel().setValueAt(" ", oldRow, oldColumn);
        this.jTable1.getModel().setValueAt("P", newRow, newColumn);
    }//GEN-LAST:event_jpUpButtonActionPerformed

    private void jpInventoryViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpInventoryViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jpInventoryViewActionPerformed

    private void jpDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpDownButtonActionPerformed
        // TODO add your handling code here:
        Game game = ZombieHunting.getCurrentGame();
        Player player = game.getPlayer();
        
        //old positioning data
        int oldRow = player.getRowPosition();
        int oldColumn = player.getColumnPosition();
        
        //move the player
        PlayerControl.movePlayer("S");
        
        //new positioning data
        int newRow = player.getRowPosition();
        int newColumn = player.getColumnPosition();
        
        this.jTable1.getModel().setValueAt(" ", oldRow, oldColumn);
        this.jTable1.getModel().setValueAt("P", newRow, newColumn);
    }//GEN-LAST:event_jpDownButtonActionPerformed

    private void jpLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpLeftButtonActionPerformed
        // TODO add your handling code here:
        Game game = ZombieHunting.getCurrentGame();
        Player player = game.getPlayer();
        
        //old positioning data
        int oldRow = player.getRowPosition();
        int oldColumn = player.getColumnPosition();
        
        //move the player
        PlayerControl.movePlayer("A");
        
        //new positioning data
        int newRow = player.getRowPosition();
        int newColumn = player.getColumnPosition();
        
        this.jTable1.getModel().setValueAt(" ", oldRow, oldColumn);
        this.jTable1.getModel().setValueAt("P", newRow, newColumn);
    }//GEN-LAST:event_jpLeftButtonActionPerformed

    private void jpRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpRightButtonActionPerformed
        // TODO add your handling code here:
        Game game = ZombieHunting.getCurrentGame();
        Player player = game.getPlayer();
        
        //old positioning data
        int oldRow = player.getRowPosition();
        int oldColumn = player.getColumnPosition();
        
        //move the player
        PlayerControl.movePlayer("D");
        
        //new positioning data
        int newRow = player.getRowPosition();
        int newColumn = player.getColumnPosition();
        
        this.jTable1.getModel().setValueAt(" ", oldRow, oldColumn);
        this.jTable1.getModel().setValueAt("P", newRow, newColumn);
    }//GEN-LAST:event_jpRightButtonActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jpCheckWeaponsButton;
    private javax.swing.JButton jpDownButton;
    private javax.swing.JButton jpInventoryView;
    private javax.swing.JButton jpLeftButton;
    private javax.swing.JButton jpRightButton;
    private javax.swing.JButton jpUpButton;
    // End of variables declaration//GEN-END:variables
}
